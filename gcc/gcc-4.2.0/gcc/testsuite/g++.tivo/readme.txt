Introduction
~~~~~~~~~~~~
NOTE: changes to gcc are all #ifdef'd TIVO

TiVo uses ref counting to do memory management of objects derived from
TmkCore.  The template class ref<T> is a smart pointer class which
automatically calls UpRef() and DownRef() on the pointer it holds.
See ref.h for the rules of safe ref counting.

There came a time when there were bugs caused by violation of the
rules, so it was decided that the compiler (g++) should be augmented
to check as many of the rules as possible.  This document explains
which rules we check, how we check them, and limitations.

What we check
~~~~~~~~~~~~~
We check rules (1) and (2):  given class Foo, derived from TmkCore:

(1) No member variable or local variable should be of type Foo*.
    (It should be ref<Foo> or nonRef<Foo>.)
(2) No method or function should return a Foo*.
    (It should be ref<Foo> or nonRef<Foo>.)

We'd like to check the following rules (someday):

(4) Don't call a function with a "new(mempool) Foo()"
    because there won't necessarily be anyone to delete it.
    Or, it might be deleted early!

And the following "unstated" rules...

* ~Foo() should be protected.  This will prevent people from placing
  Foos on the stack or as member variables and will ensure that they
  never call delete directly.

* check that ref<T> is only used for T such that T is derived from
  TmkCore.

* check that no global variable is ref<Foo>, since the variable might
  hold the object until after the mempools have been destroyed.

General:

* add command-line arg "-WtivoRefCountingBaseClass=classNameHere" so
  that the compiler doesn't have it hard-coded in and won't do the
  checks if the argument isn't given.  should probably also provide
  "-WtivoRefCountingWarningsArentErrors".  remove the environment
  variables.


How we check
~~~~~~~~~~~~
We examine each local variable as it is declared and then
all classes and their members and function and method declarations
when the compiler has parsed the entire input.

Limitations on the check
~~~~~~~~~~~~~~~~~~~~~~~~

The checking code has to have seen declarations of the type of a
variable before it can know that the usage is wrong.  For example, if
the compiler hasn't the declaration of Foo, it can't know whether a
variable of type "Foo*" is breaking the rules.  Fortunately, you can't
do much with that variable without having seen the declaration, so
this is probably only a minor limitation.  And since we do checks
for members and globals and return types only after seeing all of the
input, I think we're doing pretty well.

We don't check the return types of function types.  We only check the
return types of functions.  This should be ok since eventually, we'll
catch you when you declare a function of that type.

Warnings in template classes should probably mention where the
template was instantiated.  Oh well.


What changes we made
~~~~~~~~~~~~~~~~~~~~
The changes to the compiler consist of code that implements
the new rules, modifications to the compiler to use the
new checks, this documentation, and a regression suite.


THE NEW RULES:

integrate.c
   added expanding_inline_function, an int which is > 0 when
   we're expanding inlines into a caller.  this is necessary
   because parameters become locals variables in the caller's 
   scope.  since we all Foo* as a parameter type and we don't
   allow it as local variable's type, tivoCheckDecl() doesn't
   check decls during inline expansion.   

cp/tivoRefCount.{h,c}
   These files declare and implement the public interface
   to the TiVo ref counting checking code.


COMPILER CHANGES:

cp/Make-lang.in
   added tivoRefCount.o to the list of needed objects.

cp/decl.c
   changed pushdecl() to check non-global declarations
   using tivoCheckDecl().  this is used to test local
   variables since they are not available at the end
   of the program.

cp/decl2.c
   changed finish_file() to do a check of the whole
   file (and #include'd files) using 
   tivoCheckRefCountingRules().


THE DOCUMENTATION:

tivoRefCountSuite/readme.txt
   this file

$(SANDBOX)/teleworld/src/tmk/include/ref.h
   i edited this to document which rules are checked.

THE REGRESSION SUITE:

tivoRefCountSuite/regressTiVoRefCount.sh
   a script which compiles a bunch of files and 
   compares the output with the expected output.
   be sure the compiler you want to test (and its
   subpieces) are in your path or otherwise
   found properly.  (i copy cc1plus to where it's 
   installed on my machine.)
   
tivoRefCountSuite/*.{h,C}
   these files are the input files for the regression suite

tivoRefCountSuite/*.out
   these files are generated by regressTiVoRefCount.sh
   don't check them in

tivoRefCountSuite/*.out.gold
   these files are the golden, expected output compared
   against by regressTiVoRefCount.sh.

