diff -Naur gstreamer-0.10.36-ORIGINAL/gst/gstpad.c gstreamer-0.10.36-PATCHED/gst/gstpad.c
--- gstreamer-0.10.36-ORIGINAL/gst/gstpad.c	2011-12-29 17:14:34.000000000 -0800
+++ gstreamer-0.10.36-PATCHED/gst/gstpad.c	2014-02-19 22:10:53.000000000 -0800
@@ -420,6 +420,8 @@
 
   GST_CAT_DEBUG_OBJECT (GST_CAT_REFCOUNTING, pad, "dispose");
 
+  gst_pad_stop_task (pad);
+
   /* unlink the peer pad */
   if ((peer = gst_pad_get_peer (pad))) {
     /* window for MT unsafeness, someone else could unlink here
@@ -450,14 +452,8 @@
 gst_pad_finalize (GObject * object)
 {
   GstPad *pad = GST_PAD_CAST (object);
-  GstTask *task;
 
-  /* in case the task is still around, clean it up */
-  if ((task = GST_PAD_TASK (pad))) {
-    gst_task_join (task);
-    GST_PAD_TASK (pad) = NULL;
-    gst_object_unref (task);
-  }
+  gst_pad_stop_task (pad);
 
   if (pad->stream_rec_lock) {
     g_static_rec_mutex_free (pad->stream_rec_lock);
@@ -5716,9 +5712,6 @@
     GST_DEBUG_OBJECT (pad, "no task");
     GST_OBJECT_UNLOCK (pad);
 
-    GST_PAD_STREAM_LOCK (pad);
-    GST_PAD_STREAM_UNLOCK (pad);
-
     /* this is not an error */
     return TRUE;
   }
diff -Naur gstreamer-0.10.36-ORIGINAL/gst/gsttask.c gstreamer-0.10.36-PATCHED/gst/gsttask.c
--- gstreamer-0.10.36-ORIGINAL/gst/gsttask.c	2011-12-29 17:14:35.000000000 -0800
+++ gstreamer-0.10.36-PATCHED/gst/gsttask.c	2014-02-19 21:59:15.000000000 -0800
@@ -302,18 +302,13 @@
     if (G_UNLIKELY (GET_TASK_STATE (task) == GST_TASK_PAUSED)) {
       GST_OBJECT_LOCK (task);
       while (G_UNLIKELY (GST_TASK_STATE (task) == GST_TASK_PAUSED)) {
-        gint t;
+        g_static_rec_mutex_unlock (lock);
 
-        t = g_static_rec_mutex_unlock_full (lock);
-        if (t <= 0) {
-          g_warning ("wrong STREAM_LOCK count %d", t);
-        }
         GST_TASK_SIGNAL (task);
         GST_TASK_WAIT (task);
         GST_OBJECT_UNLOCK (task);
         /* locking order.. */
-        if (t > 0)
-          g_static_rec_mutex_lock_full (lock, t);
+        g_static_rec_mutex_lock (lock);
 
         GST_OBJECT_LOCK (task);
         if (G_UNLIKELY (GET_TASK_STATE (task) == GST_TASK_STOPPED)) {
@@ -477,9 +472,8 @@
 
   g_return_if_fail (GST_IS_TASK (task));
 
-  priv = task->priv;
-
   GST_OBJECT_LOCK (task);
+  priv = task->priv;
   priv->prio_set = TRUE;
   priv->priority = priority;
   thread = task->abidata.ABI.thread;
@@ -517,9 +511,8 @@
 
   g_return_val_if_fail (GST_IS_TASK (task), NULL);
 
-  priv = task->priv;
-
   GST_OBJECT_LOCK (task);
+  priv = task->priv;
   result = gst_object_ref (priv->pool);
   GST_OBJECT_UNLOCK (task);
 
@@ -547,9 +540,8 @@
   g_return_if_fail (GST_IS_TASK (task));
   g_return_if_fail (GST_IS_TASK_POOL (pool));
 
-  priv = task->priv;
-
   GST_OBJECT_LOCK (task);
+  priv = task->priv;
   if (priv->pool != pool) {
     old = priv->pool;
     priv->pool = gst_object_ref (pool);
@@ -631,7 +623,9 @@
 
   g_return_val_if_fail (GST_IS_TASK (task), GST_TASK_STOPPED);
 
+  GST_OBJECT_LOCK (task);
   result = GET_TASK_STATE (task);
+  GST_OBJECT_UNLOCK (task);
 
   return result;
 }
@@ -698,6 +692,7 @@
   GST_DEBUG_OBJECT (task, "Changing task %p to state %d", task, state);
 
   GST_OBJECT_LOCK (task);
+
   if (state != GST_TASK_STOPPED)
     if (G_UNLIKELY (GST_TASK_GET_LOCK (task) == NULL))
       goto no_lock;
@@ -816,8 +811,6 @@
   gpointer id;
   GstTaskPool *pool = NULL;
 
-  priv = task->priv;
-
   g_return_val_if_fail (GST_IS_TASK (task), FALSE);
 
   tself = g_thread_self ();
@@ -827,6 +820,7 @@
   /* we don't use a real thread join here because we are using
    * thread pools */
   GST_OBJECT_LOCK (task);
+  priv = task->priv;
   if (G_UNLIKELY (tself == task->abidata.ABI.thread))
     goto joining_self;
   SET_TASK_STATE (task, GST_TASK_STOPPED);
