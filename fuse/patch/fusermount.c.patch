*** fuse-2.9.1/util/fusermount.c	2012-04-11 06:57:44.000000000 -0700
--- patch/fusermount.c	2012-09-10 16:49:15.000000000 -0700
***************
*** 34,40 ****
  #define FUSE_DEV_OLD "/proc/fs/fuse/dev"
  #define FUSE_DEV_NEW "/dev/fuse"
  #define FUSE_VERSION_FILE_OLD "/proc/fs/fuse/version"
! #define FUSE_CONF "/etc/fuse.conf"
  
  #ifndef MS_DIRSYNC
  #define MS_DIRSYNC 128
--- 34,40 ----
  #define FUSE_DEV_OLD "/proc/fs/fuse/dev"
  #define FUSE_DEV_NEW "/dev/fuse"
  #define FUSE_VERSION_FILE_OLD "/proc/fs/fuse/version"
! // #define FUSE_CONF "/etc/fuse.conf"
  
  #ifndef MS_DIRSYNC
  #define MS_DIRSYNC 128
***************
*** 58,64 ****
  
  static const char *progname;
  
! static int user_allow_other = 0;
  static int mount_max = 1000;
  
  static int auto_unmount = 0;
--- 58,64 ----
  
  static const char *progname;
  
! static int user_allow_other = 1;
  static int mount_max = 1000;
  
  static int auto_unmount = 0;
***************
*** 524,575 ****
  		memmove(line, s, strlen(s)+1);
  }
  
! static void parse_line(char *line, int linenum)
! {
! 	int tmp;
! 	if (strcmp(line, "user_allow_other") == 0)
! 		user_allow_other = 1;
! 	else if (sscanf(line, "mount_max = %i", &tmp) == 1)
! 		mount_max = tmp;
! 	else if(line[0])
! 		fprintf(stderr,
! 			"%s: unknown parameter in %s at line %i: '%s'\n",
! 			progname, FUSE_CONF, linenum, line);
! }
! 
! static void read_conf(void)
! {
! 	FILE *fp = fopen(FUSE_CONF, "r");
! 	if (fp != NULL) {
! 		int linenum = 1;
! 		char line[256];
! 		int isnewline = 1;
! 		while (fgets(line, sizeof(line), fp) != NULL) {
! 			if (isnewline) {
! 				if (line[strlen(line)-1] == '\n') {
! 					strip_line(line);
! 					parse_line(line, linenum);
! 				} else {
! 					isnewline = 0;
! 				}
! 			} else if(line[strlen(line)-1] == '\n') {
! 				fprintf(stderr, "%s: reading %s: line %i too long\n", progname, FUSE_CONF, linenum);
! 
! 				isnewline = 1;
! 			}
! 			if (isnewline)
! 				linenum ++;
! 		}
! 		if (!isnewline) {
! 			fprintf(stderr, "%s: reading %s: missing newline at end of file\n", progname, FUSE_CONF);
! 
! 		}
! 		fclose(fp);
! 	} else if (errno != ENOENT) {
! 		fprintf(stderr, "%s: failed to open %s: %s\n",
! 			progname, FUSE_CONF, strerror(errno));
! 	}
! }
  
  static int begins_with(const char *s, const char *beg)
  {
--- 524,575 ----
  		memmove(line, s, strlen(s)+1);
  }
  
! // static void parse_line(char *line, int linenum)
! // {
! // 	int tmp;
! // 	if (strcmp(line, "user_allow_other") == 0)
! // 		user_allow_other = 1;
! // 	else if (sscanf(line, "mount_max = %i", &tmp) == 1)
! // 		mount_max = tmp;
! // 	else if(line[0])
! // 		fprintf(stderr,
! // 			"%s: unknown parameter in %s at line %i: '%s'\n",
! // 			progname, FUSE_CONF, linenum, line);
! // }
! // 
! // static void read_conf(void)
! // {
! // 	FILE *fp = fopen(FUSE_CONF, "r");
! // 	if (fp != NULL) {
! // 		int linenum = 1;
! // 		char line[256];
! // 		int isnewline = 1;
! // 		while (fgets(line, sizeof(line), fp) != NULL) {
! // 			if (isnewline) {
! // 				if (line[strlen(line)-1] == '\n') {
! // 					strip_line(line);
! // 					parse_line(line, linenum);
! // 				} else {
! // 					isnewline = 0;
! // 				}
! // 			} else if(line[strlen(line)-1] == '\n') {
! // 				fprintf(stderr, "%s: reading %s: line %i too long\n", progname, FUSE_CONF, linenum);
! // 
! // 				isnewline = 1;
! // 			}
! // 			if (isnewline)
! // 				linenum ++;
! // 		}
! // 		if (!isnewline) {
! // 			fprintf(stderr, "%s: reading %s: missing newline at end of file\n", progname, FUSE_CONF);
! // 
! // 		}
! // 		fclose(fp);
! // 	} else if (errno != ENOENT) {
! // 		fprintf(stderr, "%s: failed to open %s: %s\n",
! // 			progname, FUSE_CONF, strerror(errno));
! // 	}
! // }
  
  static int begins_with(const char *s, const char *beg)
  {
***************
*** 1065,1071 ****
  		return -1;
  
  	drop_privs();
! 	read_conf();
  
  	if (getuid() != 0 && mount_max != -1) {
  		int mount_count = count_fuse_fs();
--- 1065,1071 ----
  		return -1;
  
  	drop_privs();
! //	read_conf();
  
  	if (getuid() != 0 && mount_max != -1) {
  		int mount_count = count_fuse_fs();
